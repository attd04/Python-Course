
from turtle import Screen
from paddle import Paddle
from ball import Ball
from scoreboard import Scoreboard
import time

# screen setup
screen = Screen()
screen.setup(800, 600)
screen.bgcolor("black")
screen.title("Pong")
screen.tracer(0)

# paddles and ball and scoreboard
paddle_r = Paddle(350, 0)
paddle_l = Paddle(-350, 0)
ball = Ball()
scoreboard = Scoreboard()

# move paddles
screen.listen()
screen.onkey(paddle_r.up, "Up")
screen.onkey(paddle_r.down, "Down")
screen.onkey(paddle_l.up, "w")
screen.onkey(paddle_l.down, "s")


game_on = True
while game_on:
    time.sleep(ball.move_speed)
    screen.update()
    ball.move()

    # detect top / bottom wall collision
    if ball.ycor() > 280 or ball.ycor() < -280:
        ball.bounce_y()

    # detect side wall collision + add points
    if ball.xcor() > 380:
        ball.reset()
        scoreboard.add_score_l()

    if ball.xcor() < -380:
        ball.reset()
        scoreboard.add_score_r()

    if scoreboard.score_r == 5 or scoreboard.score_l == 5:
        scoreboard.game_over()

    # collision w/ paddles
    if ball.distance(paddle_r) < 50 and ball.xcor() > 320:
        ball.bounce_x()

    if ball.distance(paddle_l) < 50 and ball.xcor() < -320:
        ball.bounce_x()


screen.exitonclick()


# scoreboard.py
from turtle import Turtle, Screen
from ball import Ball
screen = Screen()
ball = Ball()
ball.hideturtle()

class Scoreboard(Turtle):
    def __init__(self):
        super().__init__()
        self.score_l = 0
        self.score_r = 0
        self.color("white")
        self.hideturtle()
        self.penup()
        self.goto(0, 200)
        self.update_scoreboard()

    def update_scoreboard(self):
        self.write(f"{self.score_l}   {self.score_r}", False, "center", ("Courier", 80, "normal"))

    def add_score_r(self):
        self.score_r += 1
        self.clear()
        self.update_scoreboard()

        if self.score_r == 3:
            self.game_over()

    def add_score_l(self):
        self.score_l += 1
        self.clear()
        self.update_scoreboard()

    def game_over(self):
        ball.hideturtle()
        ball.stop()
        self.color("white")
        self.hideturtle()
        self.penup()
        self.goto(0, 0)
        self.write("GAME OVER.", False, "center", ("Courier", 40, "normal"))


# ball.py
from turtle import Turtle

class Ball(Turtle):

    def __init__(self):
        super().__init__()
        self.penup()
        self.shape("circle")
        self.color("white")

        self.x_move = 10
        self.y_move = 10
        self.move_speed = 0.1

    def move(self):
        new_x = self.xcor() + self.x_move
        new_y = self.ycor() + self.y_move
        self.goto(new_x, new_y)

    def bounce_y(self):
        self.y_move *= -1
        self.move()

    def bounce_x(self):
        self.x_move *= -1
        self.move()
        self.move_speed *= 0.9

    def reset(self):
        self.goto(0,0)
        self.move_speed = 0.1
        self.move()

    def stop(self):
        self.goto(0, 0)
        self.color("black")


# paddle.py
from turtle import Turtle

class Paddle(Turtle):
    def __init__(self, x_cord, y_cord):
        super().__init__()
        self.shape("square")
        self.color("white")
        self.shapesize(5,1)
        self.penup()
        self.goto(x_cord, y_cord)

    def up(self):
        new_y = self.ycor() + 20
        self.goto(self.xcor(), new_y)

    def down(self):
        new_y = self.ycor() - 20
        self.goto(self.xcor(), new_y)


